#!/bin/sh
# Arch Linux Boostrapping Script (ALBS)
# This script installs all programs I need and
# configures the system to fit my needs.
#
# by Robert Lag <rob.lag@outlook.com>
# Heavily inspired by Luke Smith's LARBS

### OPTIONS AND VARIABLES ### {{{1

# Set default values {{{2
# TODO: Make sure that the default values are correct
dotfilesrepo="https://github.com/robert-lag/dotfiles.git"
progsfile="https://raw.githubusercontent.com/robert-lag/arch-linux-bootstrap/master/programs.csv"
aurhelper="yay"
repobranch="master"
dotfiles_directory=".dotfiles"

# Let the user specify custom values {{{2
while getopts ":a:r:b:p:h" o; do case "${o}" in
    h) printf "OPTIONS:
    -r    Set dotfiles repository
          (default: '$dotfilesrepo')
    -b    Set branch of dotfiles repository to install
          (default: '$repobranch')
    -p    Set url of *.csv-file describing packages to install
          (default: '$progsfile')
    -a    Set name of AUR helper to install (must have pacman-like syntax)
          (default: '$aurhelper')
    -d    Set installation directory of dotfiles
          (default: '$dotfiles_directory')
    -h    Show this message
" && exit 1 ;;
    r) dotfilesrepo=${OPTARG} &&
        git ls-remote "$dotfilesrepo" || exit 1 ;;
    b) repobranch=${OPTARG} ;;
    d) dotfiles_directory=${OPTARG} ;;
    p) progsfile=${OPTARG} ;;
    a) aurhelper=${OPTARG} ;;
    *) printf "Invalid option: -%s\\n" "$OPTARG" && exit 1 ;;
esac done

### }}}1

### FUNCTIONS ### {{{1

install_pkg() { # Installs the specified package ($1) {{{2
    pacman --noconfirm --needed -S "$1" >/dev/null 2>&1
}

error() { # {{{2
    clear
    printf "ERROR:\\n%s\\n" "$1" >&2; exit 1
}

show_welcomemsg() { # {{{2
    dialog --title "Welcome!" \
        --msgbox "Welcome to Robert's Auto-Rice Bootstrapping Script (inspired by LARBS)!

This script will automatically setup all dotfiles, scripts and programs which are used
by myself.

-- Robert" 10 60

    dialog --colors --title "Important Note!" \
        --yes-label "All ready!" \
        --no-label "Return..." \
        --yesno "Be sure the computer you are using has current pacman updates and refreshed Arch keyrings.

If it does not, the installation of some programs might fail." 8 70
}

get_username_and_password() { # Prompts user for new username an password. {{{2
    username=$(dialog --inputbox "First, please enter a name for the user account." 10 60 3>&1 1>&2 2>&3 3>&1) || exit 1
    while ! echo "$username" | grep -q "^[a-z_][a-z0-9_-]*$"; do
        username=$(dialog --no-cancel --inputbox "Username not valid. Give a username beginning with a letter, with only lowercase letters, - or _." \
            10 60 3>&1 1>&2 2>&3 3>&1)
    done

    pass1=$(dialog --no-cancel --passwordbox "Enter a password for that user." 10 60 3>&1 1>&2 2>&3 3>&1)
    pass2=$(dialog --no-cancel --passwordbox "Retype password." 10 60 3>&1 1>&2 2>&3 3>&1)
    while ! [ "$pass1" = "$pass2" ]; do
        unset pass2
        pass1=$(dialog --no-cancel --passwordbox "Passwords do not match.\\n\\nEnter password again." \
            10 60 3>&1 1>&2 2>&3 3>&1)
        pass2=$(dialog --no-cancel --passwordbox "Retype password." \
            10 60 3>&1 1>&2 2>&3 3>&1)
    done
}

check_if_user_exists_already() { # {{{2
    ! { id -u "$username" >/dev/null 2>&1; } ||
        dialog --colors --title "WARNING!" \
            --yes-label "CONTINUE" \
            --no-label "No wait..." \
            --yesno "The user \`$username\` already exists on this system. ALBS can install for a user already existing,
but it will \\Zboverwrite\\Zn any conflicting settings/dotfiles on the user account.

ALBS will \\Zbnot\\Zn overwrite your user files, documents, videos, etc., so don't worry about that,
but only click <CONTINUE> if you don't mind your settings being overwritten.

Note also that ALBS will change $username's password to the one you just gave." 14 70
}

add_user_with_password() { # Adds user `$username` with password $pass1. {{{2
    dialog --infobox "Adding user \"$username\"..." 4 50
    useradd -m -g wheel -s /bin/zsh "$username" >/dev/null 2>&1 ||
    usermod -a -G wheel "$username" && mkdir -p /home/"$username" && chown "$username":wheel /home/"$username"

    mkdir -p "$repodir"
    chown -R "$username":wheel "$(dirname "$repodir")"

    echo "$username:$pass1" | chpasswd
    unset pass1 pass2
}

show_preinstallmsg() { # {{{2
    dialog --title "Now let's get started!" \
        --yes-label "Let's go!" \
        --no-label "No, nevermind!" \
        --yesno "The rest of the installation will now be totally automated, so you can sit back and relax.

It will take some time, but when done, you can relax even more with your complete system.

Now just press <Let's go!> and the system will begin installation!" 13 60 || { clear; exit 1; }
}

refresh_keyring() { # {{{2
    dialog --infobox "Refreshing Arch Linux Keyring..." 4 40
    pacman --noconfirm -S archlinux-keyring >/dev/null 2>&1
}

set_new_sudo_permissions() { # Set special sudoers settings for install (or after). {{{2
    # Delete old permissions in config file if it exists
    sed --in-place "/# Set by ALBS/d" /etc/sudoers

    # Create new line with the new permissions
    echo "$* # Set by ALBS" >> /etc/sudoers
}

manual_install() { # Installs $1 manually if not installed {{{2
    [ -f "/usr/bin/$1" ] || (
        dialog --infobox "Installing \"$1\", an AUR helper..." 4 50
        cd /tmp || exit 1
        rm -rf /tmp/"$1"*
        curl -sO https://aur.archlinux.org/cgit/aur.git/snapshot/"$1".tar.gz &&
            sudo -u "$username" tar -xvf "$1".tar.gz >/dev/null 2>&1 &&
        cd "$1" &&
            sudo -u "$username" makepkg --noconfirm --syncdeps --install >/dev/null 2>&1
        cd /tmp || return 1)
}

main_install() { # Installs specified package ($1) from main repo {{{2
    dialog --title "ALBS Installation" --infobox "Installing \`$1\` ($package_index of $package_count). $1 $2" 5 70
    install_pkg "$1"
}

gitmake_install() { # {{{2
    progname="$(basename "$1" .git)"
    dir="$repodir/$progname"
    dialog --title "ALBS Installation" --infobox "Installing \`$progname\` ($package_index of $package_count) via \`git\` and \`make\`. $(basename "$1") $2" 5 70
    sudo -u "$username" git clone --depth 1 "$1" "$dir" >/dev/null 2>&1 \
        || {
            cd "$dir" || return 1 ;
            sudo -u "$username" git pull --force origin master;
        }
    cd "$dir" || exit 1
    make >/dev/null 2>&1
    make install >/dev/null 2>&1
    cd /tmp || return 1
}

aur_install() { # {{{2
    dialog --title "ALBS Installation" --infobox "Installing \`$1\` ($package_index of $package_count) from the AUR. $1 $2" 5 70
    echo "$aur_installed_programs" | grep -q "^$1$" && return 1
    sudo -u "$username" $aurhelper -S --noconfirm "$1" >/dev/null 2>&1
}

pip_install() { # {{{2
    dialog --title "ALBS Installation" --infobox "Installing the Python package \`$1\` ($package_index of $package_count). $1 $2" 5 70
    [ -x "$(command -v "pip")" ] || install_pkg python-pip >/dev/null 2>&1
    yes | pip install "$1"
}

installationloop() { # {{{2
    ([ -f "$progsfile" ] &&
        cp "$progsfile" /tmp/progs.csv) ||
        curl -Ls "$progsfile" | sed '/^[#\/]/d' > /tmp/progs.csv
    package_count=$(wc -l < /tmp/progs.csv)
    aur_installed_programs=$(pacman -Qqm)
    while IFS=, read -r tag program comment; do
        package_index=$((package_index+1))
        echo "$comment" | grep -q "^\".*\"$" && comment="$(echo "$comment" | sed "s/\(^\"\|\"$\)//g")"
        case "$tag" in
            "A") aur_install "$program" "$comment" ;;
            "G") gitmake_install "$program" "$comment" ;;
            "P") pip_install "$program" "$comment" ;;
            *) main_install "$program" "$comment" ;;
        esac
    done < /tmp/progs.csv
}

putgitrepo() { # Downloads a gitrepo $1 and places the files in $2 only overwriting conflicts ($3 is the branch to download (default=master)) {{{2
    dialog --infobox "Downloading and installing config files..." 4 60
    [ -z "$3" ] && branch="master" || branch="$repobranch"
    dir=$(mktemp --directory)
    [ ! -d "$2" ] && mkdir --parents "$2"
    chown "$username":wheel "$dir" "$2"
    sudo -u "$username" git clone --branch "$branch" --depth 100 --recurse-submodules "$1" "$dir" >/dev/null 2>&1
    sudo -u "$username" cp --recursive --force --no-target-directory "$dir" "$2"
}

install_dotfiles() { # Installs and stows all dotfiles {{{2
    putgitrepo "$dotfilesrepo" "/home/$username/$dotfiles_directory" "$repobranch"

    # Link all dotfiles to their correct directories (using stow)
    dotfiles_path="/home/robert/.dotfiles"
    for dir in "$dotfiles_path"/*/
    do
        dir_name=$(basename "$dir")
        echo "### $dir_name ###"
        stow --no --verbose=2 --dir="$dotfiles_path" "$dir_name"
    done
}

finalize() { # {{{2
    dialog --infobox "Preparing welcome message..." 4 50
    dialog --title "All done!" --msgbox "Congrats!
Provided there were no hidden errors, the script completed successfully and all the programs
and configuration files should be in place.
To run the new graphical environment, log out and log back in as your new user, then run the
command \"startx\" to start the graphical environment (it will start automatically in tty1).\\n\\n.t

-- Robert" 12 80
}

### }}}1

### THE ACTUAL SCRIPT ### {{{1

### User input {{{2

# Check if user is root on Arch distro. Install dialog.
# pacman --noconfirm --needed -Syu dialog ||
#     error "Are you sure you're running this as the root user, are on an Arch-based distribution and have an internet connection?"

# Welcome user and pick dotfiles
show_welcomemsg || error "User exited."

# Get and verify username and password
get_username_and_password || error "User exited."

# Set folder paths for current user
repodir="/home/$username/.local/src"

# Give warning if user already exists
check_if_user_exists_already || error "User exited."

# Last chance for user to back out before install
show_preinstallmsg || error "User exited."

exit 1

### Setup before installation {{{2

# Add user
add_user_with_password || error "Error adding username and/or password."

# Override sudoers file if *.pacnew version exists
[ -f /etc/sudoers.pacnew ] && cp /etc/sudoers.pacnew /etc/sudoers

# Allow user to run sudo without password. Since AUR programs must be installed
# in a fakeroot environment, this is required for all builds with AUR.
set_new_sudo_permissions "%wheel ALL=(ALL) NOPASSWD: ALL"

# Make pacman and yay colorful and adds eye candy on the progress bar
grep -q "^Color" /etc/pacman.conf || sed -i "s/^#Color$/Color/" /etc/pacman.conf
grep -q "ILoveCandy" /etc/pacman.conf || sed -i "/#VerbosePkgLists/a ILoveCandy" /etc/pacman.conf

# Refresh Arch keyrings
refresh_keyring || error "Error automatically refreshing Arch keyring. Consider doing so manually."

# Install programs needed for installing other programs
for x in curl base-devel git zsh; do
    dialog --title "ALBS Installation"
           --infobox "Installing \`$x\` which is required to install and configure other programs." 5 70
    install_pkg "$x"
done

# Use all cores for compilation
sed -i "s/-j2/-j$(nproc)/;s/^#MAKEFLAGS/MAKEFLAGS/" /etc/makepkg.conf

# Manually install the AUR helper (further AUR installations can use aur_install)
manual_install $aurhelper || error "Failed to install AUR helper."

### Autmatic Installation {{{2

# Install all programs described in the *.csv-file
installationloop

# Install the dotfiles
install_dotfiles

### Setup after installation {{{2

# Make zsh the default shell for the user
chsh -s /bin/zsh "$username" >/dev/null 2>&1
sudo -u "$username" mkdir --parents "/home/$username/.cache/zsh/"

# Configure touchpad (tap to click)
[ ! -f /etc/X11/xorg.conf.d/40-libinput.conf ] && printf 'Section "InputClass"
    Identifier "libinput touchpad catchall"
    MatchIsTouchpad "on"
    MatchDevicePath "/dev/input/event*"
    Driver "libinput"
    # Enable left mouse button by tapping
    Option "Tapping" "on"
EndSection' > /etc/X11/xorg.conf.d/40-libinput.conf

# This line, overwriting the `newperms` command above will allow the user to run
# serveral important commands, `shutdown`, `reboot`, updating, etc. without a password.
set_new_sudo_permissions "%wheel ALL=(ALL) ALL # Set by ALBS
%wheel ALL=(ALL) NOPASSWD: /usr/bin/shutdown,/usr/bin/reboot,/usr/bin/systemctl suspend,/usr/bin/wifi-menu,/usr/bin/mount,/usr/bin/umount,/usr/bin/pacman -Syu,/usr/bin/pacman -Syyu,/usr/bin/pacman -Syyu --noconfirm,/usr/bin/loadkeys,/usr/bin/yay,/usr/bin/pacman -Syyuw --noconfirm"

finalize
clear
